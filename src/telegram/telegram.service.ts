import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Markup } from 'telegraf';
import { session } from 'telegraf/session';
import type { Context } from 'telegraf';

import { UsersService } from '../users/users.service';
import { AnalysisService } from '../analysis/analysis.service';
import { AnalysisType } from '@prisma/client';

interface SessionData {
  selectedType?: AnalysisType;
}

interface BotContext extends Context {
  session: SessionData;
}

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: Telegraf<BotContext>;

  constructor(
    private configService: ConfigService,
    private usersService: UsersService,
    private analysisService: AnalysisService,
  ) {
    const token =
      this.configService.get<string>('BOT_TOKEN') ||
      this.configService.get<string>('TELEGRAM_BOT_TOKEN');

    if (!token) {
      throw new Error('BOT_TOKEN/TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
    }

    this.bot = new Telegraf<BotContext>(token);
  }

  async onModuleInit() {
    this.bot.use(
      session({
        defaultSession: () => ({ selectedType: undefined }),
      }),
    );
    this.setupHandlers();

    // –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    if (process.env.NODE_ENV !== 'test') {
      await this.bot.launch();
      console.log('Telegram bot launched');
    }

    // Graceful stop
    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }

  private getMainMenu() {
    return Markup.inlineKeyboard([
      [
        Markup.button.callback('üîç –ê–Ω–∞–ª–∏–∑', 'analyze'),
        Markup.button.callback('üí≥ –ë–∞–ª–∞–Ω—Å', 'balance'),
      ],
      [
        Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'history'),
        Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help'),
      ],
      [Markup.button.callback('‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞ Pro', 'subscribe')],
    ]);
  }

  private getAnalysisTypesMenu() {
    return Markup.inlineKeyboard([
      [
        Markup.button.callback('üëï Merch', 'type_merch'),
        Markup.button.callback('üçî Food', 'type_food'),
      ],
      [
        Markup.button.callback('üßë Character', 'type_character'),
        Markup.button.callback('üåê General', 'type_general'),
      ],
      [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
    ]);
  }

  private getBalanceMenu(isPro: boolean) {
    return Markup.inlineKeyboard([
      [
        isPro
          ? Markup.button.callback('‚úÖ Pro –∞–∫—Ç–∏–≤–Ω–∞', 'balance_pro')
          : Markup.button.callback('üíé –û—Ñ–æ—Ä–º–∏—Ç—å Pro', 'subscribe'),
      ],
      [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
    ]);
  }

  private parseAnalysisType(text: string | undefined): AnalysisType {
    if (!text) return AnalysisType.GENERAL;
    const upper = text.toUpperCase();
    if (upper.includes('MERCH')) return AnalysisType.MERCH;
    if (upper.includes('FOOD')) return AnalysisType.FOOD;
    if (upper.includes('CHARACTER')) return AnalysisType.CHARACTER;
    if (upper.includes('GENERAL')) return AnalysisType.GENERAL;
    return AnalysisType.GENERAL;
  }

  private extractNote(text: string | undefined): string | undefined {
    if (!text) return undefined;
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑ –∑–∞–º–µ—Ç–∫–∏
    return text.replace(/\b(MERCH|FOOD|CHARACTER|GENERAL)\b/gi, '').trim() || undefined;
  }

  private setupHandlers() {
    // Callback query handler for buttons
    this.bot.on('callback_query', async (ctx: Context) => {
      const typedCtx = ctx as BotContext;
      if (!typedCtx.callbackQuery) return;
      const data = (typedCtx.callbackQuery as { data?: string })?.data;
      if (!data) return;
      const userId = typedCtx.from.id.toString();

      const startTime = Date.now();
      console.log(
        `[CALLBACK_START] Query ID: ${typedCtx.callbackQuery.id}, Data: ${data}, Time: ${startTime}`,
      );

      const userTime = Date.now();
      try {
        await this.usersService.findOrCreateUser(
          userId,
          typedCtx.from.username,
          typedCtx.from.first_name,
          typedCtx.from.last_name,
        );
        console.log(
          `[CALLBACK_USER] After findOrCreateUser, elapsed: ${Date.now() - userTime}ms, total: ${Date.now() - startTime}ms`,
        );
      } catch (e) {
        console.error('Error in callback', e);
        await typedCtx.reply('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      if (data === 'main_menu') {
        const menuTime = Date.now();
        await typedCtx.editMessageText(
          '<b>üî• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é AI Analyzer</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          {
            parse_mode: 'HTML',
            ...this.getMainMenu(),
          },
        );
        console.log(
          `[CALLBACK_MENU] After editMessageText for main_menu, elapsed: ${Date.now() - menuTime}ms, total: ${Date.now() - startTime}ms`,
        );
      } else if (data === 'analyze') {
        const analyzeTime = Date.now();
        await typedCtx.editMessageText(
          '<b>üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞</b>\n\n' +
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –ø–æ–¥–ø–∏—Å—å.',
          {
            parse_mode: 'HTML',
            ...this.getAnalysisTypesMenu(),
          },
        );
        console.log(
          `[CALLBACK_ANALYZE] After editMessageText for analyze, elapsed: ${Date.now() - analyzeTime}ms, total: ${Date.now() - startTime}ms`,
        );
      } else if (data.startsWith('type_')) {
        const typeTime = Date.now();
        const typeStr = data.replace('type_', '');
        const upperType = typeStr.toUpperCase() as keyof typeof AnalysisType;
        const type = AnalysisType[upperType] || AnalysisType.GENERAL;
        typedCtx.session.selectedType = type;
        await typedCtx.editMessageText(
          `<b>‚úÖ –¢–∏–ø –≤—ã–±—Ä–∞–Ω: ${type}</b>\n\n` +
            'üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n' +
            '<i>–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –≤ –ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.</i>',
          {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'analyze')]]),
          },
        );
        console.log(
          `[CALLBACK_TYPE] After editMessageText for type, elapsed: ${Date.now() - typeTime}ms, total: ${Date.now() - startTime}ms`,
        );
      } else if (data === 'balance') {
        const balanceTime = Date.now();
        const balance = await this.usersService.getUserBalance(userId);
        console.log(
          `[CALLBACK_BALANCE] After getUserBalance, elapsed: ${Date.now() - balanceTime}ms, total: ${Date.now() - startTime}ms`,
        );
        const status = balance.isPro
          ? 'Pro ‚úÖ'
          : 'Free (–ø–æ–ø—ã—Ç–∫–∏: ' + balance.freeAttempts + ')';
        const editBalanceTime = Date.now();
        await typedCtx.editMessageText(
          `<b>üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n` +
            `–°—Ç–∞—Ç—É—Å: <b>${status}</b>\n` +
            `–ü–æ–¥–ø–∏—Å–∫–∞: ${balance.subscriptionStatus || '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}`,
          {
            parse_mode: 'HTML',
            ...this.getBalanceMenu(balance.isPro),
          },
        );
        console.log(
          `[CALLBACK_BALANCE_EDIT] After editMessageText for balance, elapsed: ${Date.now() - editBalanceTime}ms, total: ${Date.now() - startTime}ms`,
        );
      } else if (data === 'balance_pro') {
        const proTime = Date.now();
        await typedCtx.answerCbQuery(
          '–í–∞—à–∞ Pro –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã.',
        );
        console.log(
          `[CALLBACK_PRO] After answerCbQuery for balance_pro, elapsed: ${Date.now() - proTime}ms, total: ${Date.now() - startTime}ms`,
        );
      } else if (data === 'subscribe') {
        const subscribeTime = Date.now();
        await typedCtx.editMessageText(
          '<b>‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞ Pro</b>\n\n' +
            '–ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏–∑—É –∑–∞ 299 —Ä—É–±/–º–µ—Å.\n\n' +
            '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n' +
            '‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã\n' +
            '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n' +
            '‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
              [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', 'https://example.com/subscribe')], // Replace with actual payment link
              [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
            ]),
          },
        );
        console.log(
          `[CALLBACK_SUBSCRIBE] After editMessageText for subscribe, elapsed: ${Date.now() - subscribeTime}ms, total: ${Date.now() - startTime}ms`,
        );
      } else if (data === 'history') {
        const historyTime = Date.now();
        try {
          const userFindTime = Date.now();
          const user = await this.usersService.findByTelegramId(userId);
          console.log(
            `[CALLBACK_HISTORY_USER] After findByTelegramId, elapsed: ${Date.now() - userFindTime}ms, total: ${Date.now() - startTime}ms`,
          );
          if (!user) {
            await typedCtx.editMessageText(
              '<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
              {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                  [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
                ]),
              },
            );
            return;
          }
          const analysesTime = Date.now();
          const analyses = await this.analysisService.getUserAnalyses(user.id, 5, 0);
          console.log(
            `[CALLBACK_HISTORY_ANALYSES] After getUserAnalyses, elapsed: ${Date.now() - analysesTime}ms, total: ${Date.now() - startTime}ms`,
          );
          if (analyses.length === 0) {
            const emptyTime = Date.now();
            await typedCtx.editMessageText(
              '<b>üìä –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</b>\n\n' +
                '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–¥–µ—Å—å.',
              {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                  [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
                ]),
              },
            );
            console.log(
              `[CALLBACK_HISTORY_EMPTY] After edit for empty history, elapsed: ${Date.now() - emptyTime}ms, total: ${Date.now() - startTime}ms`,
            );
          } else {
            let message = '<b>üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã</b>\n\n';
            analyses.slice(0, 5).forEach((analysis, index) => {
              message += `${index + 1}. ${analysis.type} (${analysis.createdAt.toLocaleDateString()})\n`;
            });
            message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π:';
            const keyboard = analyses
              .slice(0, 5)
              .map((analysis) => [
                Markup.button.callback(
                  `${analysis.type} #${analysis.id}`,
                  `view_${analysis.id}`,
                ),
              ]);
            keyboard.push([Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);
            const editHistTime = Date.now();
            await typedCtx.editMessageText(message, {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard(keyboard),
            });
            console.log(
              `[CALLBACK_HISTORY_EDIT] After editMessageText for history, elapsed: ${Date.now() - editHistTime}ms, total: ${Date.now() - startTime}ms`,
            );
          }
        } catch (error) {
          console.error('Error fetching user history:', error);
          const errorTime = Date.now();
          await typedCtx.editMessageText(
            '<b>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
              ]),
            },
          );
          console.log(
            `[CALLBACK_HISTORY_ERROR] After error edit, elapsed: ${Date.now() - errorTime}ms, total: ${Date.now() - startTime}ms`,
          );
        }
      } else if (data.startsWith('view_')) {
        const viewTime = Date.now();
        const analysisId = parseInt(data.replace('view_', ''));
        const analysisFetchTime = Date.now();
        const analysis = await this.analysisService.getAnalysisById(analysisId);
        console.log(
          `[CALLBACK_VIEW_FETCH] After getAnalysisById, elapsed: ${Date.now() - analysisFetchTime}ms, total: ${Date.now() - startTime}ms`,
        );
        if (analysis) {
          const viewEditTime = Date.now();
          await typedCtx.editMessageText(
            `<b>üìã –ê–Ω–∞–ª–∏–∑ #${analysisId}</b>\n\n` +
              `–¢–∏–ø: <b>${analysis.type}</b>\n` +
              `–î–∞—Ç–∞: ${analysis.createdAt.toLocaleString()}\n` +
              `–ó–∞–º–µ—Ç–∫–∞: ${analysis.note || '–ù–µ—Ç'}\n\n` +
              `<i>${analysis.resultText}</i>\n\n` +
              `–û—Ü–µ–Ω–∫–∞: ${analysis.score || 'N/A'} / 10`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                [
                  Markup.button.callback('üîô –ò—Å—Ç–æ—Ä–∏—è', 'history'),
                  Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'),
                ],
              ]),
            },
          );
          console.log(
            `[CALLBACK_VIEW_EDIT] After editMessageText for view, elapsed: ${Date.now() - viewEditTime}ms, total: ${Date.now() - startTime}ms`,
          );
        } else {
          await typedCtx.answerCbQuery('–ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
      } else if (data === 'help') {
        const helpTime = Date.now();
        await typedCtx.editMessageText(
          '<b>‚ùì –ü–æ–º–æ—â—å</b>\n\n' +
            '‚Ä¢ <b>–ê–Ω–∞–ª–∏–∑</b>: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n' +
            '‚Ä¢ <b>–ë–∞–ª–∞–Ω—Å</b>: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ø—ã—Ç–∫–∏\n' +
            '‚Ä¢ <b>–ò—Å—Ç–æ—Ä–∏—è</b>: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—ã–µ –∞–Ω–∞–ª–∏–∑—ã\n' +
            '‚Ä¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: –û—Ñ–æ—Ä–º–∏—Ç–µ Pro –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n' +
            '–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot',
          {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
            ]),
          },
        );
        console.log(
          `[CALLBACK_HELP] After editMessageText for help, elapsed: ${Date.now() - helpTime}ms, total: ${Date.now() - startTime}ms`,
        );
      }

      const answerTime = Date.now();
      await typedCtx.answerCbQuery();
      const totalElapsed = Date.now() - startTime;
      console.log(`[CALLBACK_END] After answerCbQuery, total elapsed: ${totalElapsed}ms`);
      if (totalElapsed > 10000) {
        console.warn(
          `[CALLBACK_WARNING] Handler took too long: ${totalElapsed}ms for data: ${data}`,
        );
      }
    });

    // /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    this.bot.start(async (ctx: Context) => {
      const typedCtx = ctx as BotContext;
      try {
        const u = typedCtx.from;
        await this.usersService.findOrCreateUser(
          u.id.toString(),
          u.username,
          u.first_name,
          u.last_name,
        );
        await typedCtx.replyWithHTML(
          '<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Analyzer!</b>\n\n' +
            '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:',
          { ...this.getMainMenu() },
        );
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ /start:', e);
        await typedCtx.reply('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    this.bot.command('help', async (ctx: Context) => {
      const typedCtx = ctx as BotContext;
      await typedCtx.replyWithHTML(
        '<b>‚ùì –ü–æ–º–æ—â—å</b>\n\n' +
          '‚Ä¢ <b>–ê–Ω–∞–ª–∏–∑</b>: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n' +
          '‚Ä¢ <b>–ë–∞–ª–∞–Ω—Å</b>: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ø—ã—Ç–∫–∏\n' +
          '‚Ä¢ <b>–ò—Å—Ç–æ—Ä–∏—è</b>: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—ã–µ –∞–Ω–∞–ª–∏–∑—ã\n' +
          '‚Ä¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: –û—Ñ–æ—Ä–º–∏—Ç–µ Pro –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n' +
          '–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot',
        {
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
          ]),
        },
      );
    });

    // /balance ‚Äî –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç—É—Å
    this.bot.command('balance', async (ctx: Context) => {
      const typedCtx = ctx as BotContext;
      try {
        const userId = typedCtx.from.id.toString();
        const bal = await this.usersService.getUserBalance(userId);
        const status = bal.isPro ? 'Pro ‚úÖ' : 'Free (–ø–æ–ø—ã—Ç–∫–∏: ' + bal.freeAttempts + ')';
        await typedCtx.replyWithHTML(
          `<b>üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n` +
            `–°—Ç–∞—Ç—É—Å: <b>${status}</b>\n` +
            `–ü–æ–¥–ø–∏—Å–∫–∞: ${bal.subscriptionStatus || '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}`,
          { ...this.getBalanceMenu(bal.isPro) },
        );
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ /balance:', e);
        await typedCtx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.');
      }
    });

    // /analyze ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    this.bot.command('analyze', async (ctx: Context) => {
      const typedCtx = ctx as BotContext;
      await typedCtx.replyWithHTML(
        '<b>üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞</b>\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –ø–æ–¥–ø–∏—Å—å.',
        { ...this.getAnalysisTypesMenu() },
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ: –∞–Ω–∞–ª–∏–∑
    this.bot.on('message', async (ctx: Context) => {
      const typedCtx = ctx as BotContext;
      if (!typedCtx.message || !('photo' in typedCtx.message)) return;
      const user = typedCtx.from;
      const photo = typedCtx.message.photo;
      const fileId = photo[photo.length - 1].file_id; // –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
      const caption = typedCtx.message.caption;

      let type: AnalysisType = AnalysisType.GENERAL;
      const note = this.extractNote(caption);

      // If type selected via button
      if (typedCtx.session.selectedType) {
        type = typedCtx.session.selectedType;
        delete typedCtx.session.selectedType; // Clear after use
      } else {
        type = this.parseAnalysisType(caption);
      }

      try {
        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const dbUser = await this.usersService.findOrCreateUser(
          user.id.toString(),
          user.username,
          user.first_name,
          user.last_name,
        );

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–∑ Telegram
        const fileLink = await this.bot.telegram.getFileLink(fileId);
        const imageUrl = typeof fileLink === 'string' ? fileLink : fileLink.toString();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await this.analysisService.createAnalysis(
          dbUser.id,
          type,
          fileId,
          imageUrl,
          note,
        );

        await typedCtx.replyWithHTML(
          '<b>üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n' +
            `<i>–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: ${type}</i>\n` +
            '‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏!',
          {
            ...Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
            ]),
          },
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
        await typedCtx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  }
}
