// =============== Initialize Prisma Client ===============

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============== Перечисления (Enums) ===============

// Типы анализа, поддерживаемые системой
enum AnalysisType {
  MERCH // Анализ мерча
  FOOD // Анализ еды
  CHARACTER // Анализ персонажа
  GENERAL // Общий анализ
}

// Статус подписки пользователя
enum SubStatus {
  ACTIVE // Активна
  INACTIVE // Неактивна
  CANCELLED // Отменена
}

// Статус платежа
enum PaymentStatus {
  PENDING // В ожидании
  SUCCESS // Успешно
  FAILED // Неудачно
}

// =============== Модели ===============

// Модель пользователя
model User {
  id           Int           @id @default(autoincrement()) // Уникальный идентификатор
  telegramId   String        @unique // Telegram ID пользователя
  username     String? // Username в Telegram (опционально)
  firstName    String? // Имя (опционально)
  lastName     String? // Фамилия (опционально)
  isPro        Boolean       @default(false) // Признак Pro-подписки
  freeAttempts Int           @default(5) // Количество бесплатных попыток
  subscription Subscription? // Связь с подпиской (один к одному)
  analyses     Analysis[] // Связь с анализами (один ко многим)
  payments     Payment[] // Связь с платежами (один ко многим)
  createdAt    DateTime      @default(now()) // Дата создания
  updatedAt    DateTime      @updatedAt // Дата последнего обновления
}

// Модель анализа
model Analysis {
  id          Int          @id @default(autoincrement()) // Уникальный идентификатор
  user        User         @relation(fields: [userId], references: [id]) // Связь с пользователем
  userId      Int // Внешний ключ на пользователя
  type        AnalysisType // Тип анализа
  inputFileId String // ID файла во входных данных
  inputUrl    String? // URL файла (опционально)
  note        String? // Заметка пользователя (опционально)
  resultText  String // Результат анализа (текст)
  score       Int? // Оценка (опционально)
  createdAt   DateTime     @default(now()) // Дата создания
  updatedAt   DateTime?    @updatedAt // Дата последнего обновления (теперь опционально!)

  @@index([userId]) // Индекс по userId для быстрого поиска анализов пользователя
}

// Модель подписки
model Subscription {
  id        Int       @id @default(autoincrement()) // Уникальный идентификатор
  user      User      @relation(fields: [userId], references: [id]) // Связь с пользователем
  userId    Int       @unique // Внешний ключ на пользователя (один к одному)
  status    SubStatus @default(ACTIVE) // Статус подписки
  startedAt DateTime  @default(now()) // Дата начала подписки
  expiresAt DateTime? // Дата окончания подписки (опционально)
  updatedAt DateTime  @updatedAt // Дата последнего обновления
}

// Модель платежа
model Payment {
  id         Int           @id @default(autoincrement()) // Уникальный идентификатор
  user       User          @relation(fields: [userId], references: [id]) // Связь с пользователем
  userId     Int // Внешний ключ на пользователя
  provider   String // Провайдер платежа (например, ЮKassa)
  externalId String?       @unique // Внешний ID платежа (опционально)
  amount     Decimal       @db.Decimal(10, 2) // Сумма платежа
  currency   String        @default("RUB") // Валюта (по умолчанию рубли)
  status     PaymentStatus @default(PENDING) // Статус платежа
  createdAt  DateTime      @default(now()) // Дата создания
  updatedAt  DateTime      @updatedAt // Дата последнего обновления

  @@index([userId]) // Индекс по userId для быстрого поиска платежей пользователя
}
